{"ast":null,"code":"var _jsxFileName = \"/Users/qorka/Projects/covid/ui/src/components/compb.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Bar } from '@vx/shape';\nimport { Group } from '@vx/group';\nimport { GradientTealBlue } from '@vx/gradient';\nimport { scaleBand, scaleLinear } from '@vx/scale';\n\nfunction Compb() {\n  const [data, setData] = useState([]);\n  let dump = [];\n  useEffect(() => {\n    (async () => {\n      let a = await axios.get('https://raw.githubusercontent.com/nychealth/coronavirus-data/master/boro.csv');\n      let res = await a.data;\n      let lines = res.split('\\r'),\n          headers = lines[0].split(',');\n\n      for (let i = 1; i < lines.length; i++) {\n        let obj = {},\n            line = lines[i].replace('\\n', ''),\n            curLine = line.split(',');\n\n        for (var j = 0; j < headers.length; j++) {\n          obj[headers[j].toLowerCase()] = curLine[j];\n        }\n\n        dump.push(obj);\n      }\n\n      setData([...data, dump]);\n    })();\n  }, [dump]); // const xMax = width\n  // const yMax = height - 120\n  // const xScale = scaleBand({\n  //   rangeRound: [0, xMax],\n  //   domain: data.map(x),\n  //   padding: 0.4\n  // })\n  // const yScale = scaleLinear({\n  //   rangeRound: [yMax, 0],\n  //   domain: [0, Math.max(...data.map(y))]\n  // })\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, JSON.stringify(data)));\n}\n\nexport default Compb;","map":{"version":3,"sources":["/Users/qorka/Projects/covid/ui/src/components/compb.js"],"names":["React","useEffect","useState","axios","Bar","Group","GradientTealBlue","scaleBand","scaleLinear","Compb","data","setData","dump","a","get","res","lines","split","headers","i","length","obj","line","replace","curLine","j","toLowerCase","push","JSON","stringify"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,WAApB;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,gBAAT,QAAiC,cAAjC;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,WAAvC;;AAEA,SAASC,KAAT,GAAiB;AACf,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,MAAIU,IAAI,GAAG,EAAX;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAW;AACV,UAAIY,CAAC,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAU,8EAAV,CAAd;AACA,UAAIC,GAAG,GAAG,MAAMF,CAAC,CAACH,IAAlB;AAEA,UACEM,KAAK,GAAGD,GAAG,CAACE,KAAJ,CAAU,IAAV,CADV;AAAA,UAEEC,OAAO,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASC,KAAT,CAAe,GAAf,CAFZ;;AAIA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,YACEE,GAAG,GAAG,EADR;AAAA,YAEEC,IAAI,GAAGN,KAAK,CAACG,CAAD,CAAL,CAASI,OAAT,CAAiB,IAAjB,EAAuB,EAAvB,CAFT;AAAA,YAGEC,OAAO,GAAGF,IAAI,CAACL,KAAL,CAAW,GAAX,CAHZ;;AAKA,aAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,OAAO,CAACE,MAA5B,EAAoCK,CAAC,EAArC,EAAyC;AACvCJ,UAAAA,GAAG,CAACH,OAAO,CAACO,CAAD,CAAP,CAAWC,WAAX,EAAD,CAAH,GAAgCF,OAAO,CAACC,CAAD,CAAvC;AACD;;AAEDb,QAAAA,IAAI,CAACe,IAAL,CAAUN,GAAV;AACD;;AAEDV,MAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAUE,IAAV,CAAD,CAAP;AACD,KAtBD;AAuBD,GAxBQ,EAwBN,CAACA,IAAD,CAxBM,CAAT,CAJe,CA8Bf;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,sBACE,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKgB,IAAI,CAACC,SAAL,CAAenB,IAAf,CAAL,CADA,CADF;AA+BD;;AAED,eAAeD,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { Bar } from '@vx/shape';\nimport { Group } from '@vx/group';\nimport { GradientTealBlue } from '@vx/gradient';\nimport { scaleBand, scaleLinear } from '@vx/scale';\n\nfunction Compb() {\n  const [data, setData] = useState([])\n  let dump = []\n\n  useEffect(() => {\n    (async() => {\n      let a = await axios.get('https://raw.githubusercontent.com/nychealth/coronavirus-data/master/boro.csv')\n      let res = await a.data\n\n      let\n        lines = res.split('\\r'),\n        headers = lines[0].split(',')\n    \n      for (let i = 1; i < lines.length; i++) {\n        let \n          obj = {},\n          line = lines[i].replace('\\n', ''),\n          curLine = line.split(',')\n    \n        for (var j = 0; j < headers.length; j++) {\n          obj[headers[j].toLowerCase()] = curLine[j]\n        }\n    \n        dump.push(obj)\n      }\n\n      setData([...data, dump])\n    })()\n  }, [dump])\n\n  // const xMax = width\n  // const yMax = height - 120\n\n  // const xScale = scaleBand({\n  //   rangeRound: [0, xMax],\n  //   domain: data.map(x),\n  //   padding: 0.4\n  // })\n\n  // const yScale = scaleLinear({\n  //   rangeRound: [yMax, 0],\n  //   domain: [0, Math.max(...data.map(y))]\n  // })\n\n  return (\n    <>\n    <h1>{JSON.stringify(data)}</h1>\n      {/* <svg width={width} height={height}>\n        <GradientTealBlue id=\"teal\" />\n        <rect width={width} height={height} fill=\"#fbc2eb\" rx={14} />\n        <Group top={40}>\n          {data.map((d, i) => {\n            const letter = x(d);\n            const barWidth = xScale.bandwidth();\n            const barHeight = yMax - yScale(y(d));\n            const barX = xScale(letter);\n            const barY = yMax - barHeight;\n            return (\n              <Bar\n                key={`bar-${letter}`}\n                x={barX}\n                y={barY}\n                width={barWidth}\n                height={barHeight}\n                fill=\"rgba(23, 233, 217, .5)\"\n                onClick={event => {\n                  alert(`clicked: ${JSON.stringify(Object.values(d))}`);\n                }}\n              />\n            );\n          })}\n        </Group>\n      </svg> */}\n    </>\n  )\n}\n\nexport default Compb\n"]},"metadata":{},"sourceType":"module"}