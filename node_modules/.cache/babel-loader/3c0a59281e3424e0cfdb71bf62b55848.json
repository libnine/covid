{"ast":null,"code":"var _jsxFileName = \"/Users/qorka/Projects/covid/ui/src/components/compa.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Group } from '@vx/group';\nimport { LinePath } from '@vx/shape';\nimport { curveBasis } from '@vx/curve';\nimport { scaleTime, scaleLinear } from '@vx/scale';\nimport { GradientPinkBlue } from '@vx/gradient';\nimport { AxisLeft, AxisBottom } from '@vx/axis';\n\nfunction Compa() {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    (async () => {\n      let a = await axios.get('https://raw.githubusercontent.com/nychealth/coronavirus-data/master/case-hosp-death.csv');\n      let res = await a.data;\n      let dump = [],\n          lines = res.replace('DATE_OF_INTEREST', 'date').split('\\r'),\n          headers = lines[0].split(',');\n\n      for (let i = 1; i < lines.length; i++) {\n        let obj = {},\n            line = lines[i].replace('\\n', ''),\n            curLine = line.split(',');\n\n        for (let j = 0; j < headers.length; j++) {\n          obj[headers[j].toLowerCase()] = curLine[j] || 0;\n        }\n\n        dump.push(obj);\n      }\n\n      setData(dump);\n    })();\n  }, []);\n\n  const margin = {\n    top: 40,\n    bottom: 40,\n    left: 40,\n    right: 40\n  },\n        width = window.innerWidth / 2,\n        height = window.innerHeight / 2,\n        date = d => new Date(d.date),\n        yNew = d => d.new_covid_case_count,\n        yHosp = d => d.hospitalized_case_count,\n        yDc = d => d.death_count,\n        xMax = width - margin.left - margin.right,\n        yMax = height - margin.top - margin.bottom;\n\n  const xScale = scaleTime({\n    domain: [Math.min(...data.map(date)), Math.max(...data.map(date))],\n    range: [0, xMax]\n  });\n  const yScale = scaleLinear({\n    domain: [0, Math.max(...data.map(yNew))],\n    range: [yMax, 0]\n  });\n\n  const x = d => xScale(date(d)),\n        y1 = d => yScale(yNew(d)),\n        y2 = d => yScale(yHosp(d)),\n        y3 = d => yScale(yDc(d));\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"svg\", {\n    width: width,\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    x: 0,\n    y: 0,\n    width: width,\n    height: height,\n    fill: \"#fbc2eb\",\n    rx: 14,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GradientPinkBlue, {\n    id: \"gradient\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Group, {\n    top: margin.top,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(LinePath, {\n    data: data,\n    x: x,\n    y: y1,\n    stroke: '#ffffff',\n    strokeWidth: 3,\n    curve: curveBasis,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(LinePath, {\n    data: data,\n    x: x,\n    y: y2,\n    stroke: '#000000',\n    strokeWidth: 2,\n    curve: curveBasis,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(LinePath, {\n    data: data,\n    x: x,\n    y: y3,\n    stroke: '#ffffff',\n    strokeWidth: 1,\n    curve: curveBasis,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default Compa;","map":{"version":3,"sources":["/Users/qorka/Projects/covid/ui/src/components/compa.js"],"names":["React","useEffect","useState","axios","Group","LinePath","curveBasis","scaleTime","scaleLinear","GradientPinkBlue","AxisLeft","AxisBottom","Compa","data","setData","a","get","res","dump","lines","replace","split","headers","i","length","obj","line","curLine","j","toLowerCase","push","margin","top","bottom","left","right","width","window","innerWidth","height","innerHeight","date","d","Date","yNew","new_covid_case_count","yHosp","hospitalized_case_count","yDc","death_count","xMax","yMax","xScale","domain","Math","min","map","max","range","yScale","x","y1","y2","y3"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,WAAvC;AACA,SAASC,gBAAT,QAAiC,cAAjC;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,UAArC;;AAGA,SAASC,KAAT,GAAiB;AACf,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAW;AACV,UAAIc,CAAC,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAU,yFAAV,CAAd;AACA,UAAIC,GAAG,GAAG,MAAMF,CAAC,CAACF,IAAlB;AAEA,UACEK,IAAI,GAAG,EADT;AAAA,UAEEC,KAAK,GAAGF,GAAG,CAACG,OAAJ,CAAY,kBAAZ,EAAgC,MAAhC,EAAwCC,KAAxC,CAA8C,IAA9C,CAFV;AAAA,UAGEC,OAAO,GAAGH,KAAK,CAAC,CAAD,CAAL,CAASE,KAAT,CAAe,GAAf,CAHZ;;AAKA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,YACEE,GAAG,GAAG,EADR;AAAA,YAEEC,IAAI,GAAGP,KAAK,CAACI,CAAD,CAAL,CAASH,OAAT,CAAiB,IAAjB,EAAuB,EAAvB,CAFT;AAAA,YAGEO,OAAO,GAAGD,IAAI,CAACL,KAAL,CAAW,GAAX,CAHZ;;AAKA,aAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,OAAO,CAACE,MAA5B,EAAoCI,CAAC,EAArC,EAAyC;AACvCH,UAAAA,GAAG,CAACH,OAAO,CAACM,CAAD,CAAP,CAAWC,WAAX,EAAD,CAAH,GAAgCF,OAAO,CAACC,CAAD,CAAP,IAAc,CAA9C;AACD;;AAEDV,QAAAA,IAAI,CAACY,IAAL,CAAUL,GAAV;AACD;;AAEDX,MAAAA,OAAO,CAACI,IAAD,CAAP;AACD,KAvBD;AAwBD,GAzBQ,EAyBN,EAzBM,CAAT;;AA2BA,QACEa,MAAM,GAAG;AACPC,IAAAA,GAAG,EAAE,EADE;AAEPC,IAAAA,MAAM,EAAE,EAFD;AAGPC,IAAAA,IAAI,EAAE,EAHC;AAIPC,IAAAA,KAAK,EAAE;AAJA,GADX;AAAA,QAOEC,KAAK,GAAGC,MAAM,CAACC,UAAP,GAAoB,CAP9B;AAAA,QAQEC,MAAM,GAAGF,MAAM,CAACG,WAAP,GAAqB,CARhC;AAAA,QASEC,IAAI,GAAGC,CAAC,IAAI,IAAIC,IAAJ,CAASD,CAAC,CAACD,IAAX,CATd;AAAA,QAUEG,IAAI,GAAGF,CAAC,IAAIA,CAAC,CAACG,oBAVhB;AAAA,QAWEC,KAAK,GAAGJ,CAAC,IAAIA,CAAC,CAACK,uBAXjB;AAAA,QAYEC,GAAG,GAAGN,CAAC,IAAIA,CAAC,CAACO,WAZf;AAAA,QAaEC,IAAI,GAAGd,KAAK,GAAGL,MAAM,CAACG,IAAf,GAAsBH,MAAM,CAACI,KAbtC;AAAA,QAcEgB,IAAI,GAAGZ,MAAM,GAAGR,MAAM,CAACC,GAAhB,GAAsBD,MAAM,CAACE,MAdtC;;AAgBA,QAAMmB,MAAM,GAAG7C,SAAS,CAAC;AACvB8C,IAAAA,MAAM,EAAE,CAACC,IAAI,CAACC,GAAL,CAAS,GAAG1C,IAAI,CAAC2C,GAAL,CAASf,IAAT,CAAZ,CAAD,EAA8Ba,IAAI,CAACG,GAAL,CAAS,GAAG5C,IAAI,CAAC2C,GAAL,CAASf,IAAT,CAAZ,CAA9B,CADe;AAEvBiB,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAIR,IAAJ;AAFgB,GAAD,CAAxB;AAKA,QAAMS,MAAM,GAAGnD,WAAW,CAAC;AACzB6C,IAAAA,MAAM,EAAE,CAAC,CAAD,EAAIC,IAAI,CAACG,GAAL,CAAS,GAAG5C,IAAI,CAAC2C,GAAL,CAASZ,IAAT,CAAZ,CAAJ,CADiB;AAEzBc,IAAAA,KAAK,EAAE,CAACP,IAAD,EAAO,CAAP;AAFkB,GAAD,CAA1B;;AAKA,QACES,CAAC,GAAGlB,CAAC,IAAIU,MAAM,CAACX,IAAI,CAACC,CAAD,CAAL,CADjB;AAAA,QAEEmB,EAAE,GAAGnB,CAAC,IAAIiB,MAAM,CAACf,IAAI,CAACF,CAAD,CAAL,CAFlB;AAAA,QAGEoB,EAAE,GAAGpB,CAAC,IAAIiB,MAAM,CAACb,KAAK,CAACJ,CAAD,CAAN,CAHlB;AAAA,QAIEqB,EAAE,GAAGrB,CAAC,IAAIiB,MAAM,CAACX,GAAG,CAACN,CAAD,CAAJ,CAJlB;;AAMA,sBACE,uDACE;AAAK,IAAA,KAAK,EAAEN,KAAZ;AAAmB,IAAA,MAAM,EAAEG,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,CAAC,EAAE,CAAT;AAAY,IAAA,CAAC,EAAE,CAAf;AAAkB,IAAA,KAAK,EAAEH,KAAzB;AAAgC,IAAA,MAAM,EAAEG,MAAxC;AAAgD,IAAA,IAAI,EAAC,SAArD;AAA+D,IAAA,EAAE,EAAE,EAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGI,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAER,MAAM,CAACC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEnB,IADR;AAEE,IAAA,CAAC,EAAE+C,CAFL;AAGE,IAAA,CAAC,EAAEC,EAHL;AAIE,IAAA,MAAM,EAAE,SAJV;AAKE,IAAA,WAAW,EAAE,CALf;AAME,IAAA,KAAK,EAAEvD,UANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eASE,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEO,IADR;AAEE,IAAA,CAAC,EAAE+C,CAFL;AAGE,IAAA,CAAC,EAAEE,EAHL;AAIE,IAAA,MAAM,EAAE,SAJV;AAKE,IAAA,WAAW,EAAE,CALf;AAME,IAAA,KAAK,EAAExD,UANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,eAiBE,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEO,IADR;AAEE,IAAA,CAAC,EAAE+C,CAFL;AAGE,IAAA,CAAC,EAAEG,EAHL;AAIE,IAAA,MAAM,EAAE,SAJV;AAKE,IAAA,WAAW,EAAE,CALf;AAME,IAAA,KAAK,EAAEzD,UANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBF,CAHJ,CADF,CADF;AAkCD;;AAED,eAAeM,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { Group } from '@vx/group'\nimport { LinePath } from '@vx/shape'\nimport { curveBasis } from '@vx/curve'\nimport { scaleTime, scaleLinear } from '@vx/scale'\nimport { GradientPinkBlue } from '@vx/gradient'\nimport { AxisLeft, AxisBottom } from '@vx/axis'\n\n\nfunction Compa() {\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    (async() => {\n      let a = await axios.get('https://raw.githubusercontent.com/nychealth/coronavirus-data/master/case-hosp-death.csv')\n      let res = await a.data\n  \n      let \n        dump = [],\n        lines = res.replace('DATE_OF_INTEREST', 'date').split('\\r'),\n        headers = lines[0].split(',')\n\n      for (let i = 1; i < lines.length; i++) {\n        let\n          obj = {},\n          line = lines[i].replace('\\n', ''),\n          curLine = line.split(',')\n    \n        for (let j = 0; j < headers.length; j++) {\n          obj[headers[j].toLowerCase()] = curLine[j] || 0\n        }\n\n        dump.push(obj)\n      }\n\n      setData(dump)\n    })()\n  }, [])\n  \n  const \n    margin = {\n      top: 40,\n      bottom: 40,\n      left: 40,\n      right: 40\n    },\n    width = window.innerWidth / 2,\n    height = window.innerHeight / 2,\n    date = d => new Date(d.date),\n    yNew = d => d.new_covid_case_count,\n    yHosp = d => d.hospitalized_case_count,\n    yDc = d => d.death_count,\n    xMax = width - margin.left - margin.right,\n    yMax = height - margin.top - margin.bottom\n\n  const xScale = scaleTime({\n    domain: [Math.min(...data.map(date)), Math.max(...data.map(date))],\n    range: [0, xMax]\n  })\n\n  const yScale = scaleLinear({\n    domain: [0, Math.max(...data.map(yNew))],\n    range: [yMax, 0]\n  })\n\n  const\n    x = d => xScale(date(d)),\n    y1 = d => yScale(yNew(d)),\n    y2 = d => yScale(yHosp(d)),\n    y3 = d => yScale(yDc(d))\n\n  return (\n    <>\n      <svg width={width} height={height}> \n        <rect x={0} y={0} width={width} height={height} fill=\"#fbc2eb\" rx={14} />\n        <GradientPinkBlue id=\"gradient\" />\n          <Group top={margin.top}>\n            <LinePath\n              data={data}\n              x={x}\n              y={y1}\n              stroke={'#ffffff'}\n              strokeWidth={3}\n              curve={curveBasis}\n            />\n            <LinePath\n              data={data}\n              x={x}\n              y={y2}\n              stroke={'#000000'}\n              strokeWidth={2}\n              curve={curveBasis}\n            />\n            <LinePath\n              data={data}\n              x={x}\n              y={y3}\n              stroke={'#ffffff'}\n              strokeWidth={1}\n              curve={curveBasis}\n            />\n          </Group>\n      </svg>\n    </>\n  )\n}\n\nexport default Compa\n"]},"metadata":{},"sourceType":"module"}