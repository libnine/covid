{"ast":null,"code":"import React from 'react';\nimport { Group } from '@vx/group';\nimport { Circle } from '@vx/shape';\nimport { LinearGradient } from '@vx/gradient';\nimport { scaleLinear } from '@vx/scale';\nimport { withTooltip, Tooltip } from '@vx/tooltip';\n\nfunction Compd() {\n  let tooltipTimeout;\n\n  const x = d => d[0],\n        y = d => d[1],\n        z = d => d[2];\n\n  const width = 400,\n        height = 600,\n        xMax = width,\n        yMax = height - 80;\n  const xScale = scaleLinear({\n    domain: [1.3, 2.2],\n    range: [0, xMax],\n    clamp: true\n  });\n  const yScale = scaleLinear({\n    domain: [0.75, 1.6],\n    range: [yMax, 0],\n    clamp: true\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n}\n\nexport default withTooltip(Compd);","map":{"version":3,"sources":["/Users/qorka/Projects/covid/ui/src/components/compd.js"],"names":["React","Group","Circle","LinearGradient","scaleLinear","withTooltip","Tooltip","Compd","tooltipTimeout","x","d","y","z","width","height","xMax","yMax","xScale","domain","range","clamp","yScale"],"mappings":"AAAE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,aAArC;;AAEF,SAASC,KAAT,GAAiB;AACf,MAAIC,cAAJ;;AAEA,QACEC,CAAC,GAAGC,CAAC,IAAIA,CAAC,CAAC,CAAD,CADZ;AAAA,QAEEC,CAAC,GAAGD,CAAC,IAAIA,CAAC,CAAC,CAAD,CAFZ;AAAA,QAGEE,CAAC,GAAGF,CAAC,IAAIA,CAAC,CAAC,CAAD,CAHZ;;AAKA,QACEG,KAAK,GAAG,GADV;AAAA,QAEEC,MAAM,GAAG,GAFX;AAAA,QAGEC,IAAI,GAAGF,KAHT;AAAA,QAIEG,IAAI,GAAGF,MAAM,GAAG,EAJlB;AAMA,QAAMG,MAAM,GAAGb,WAAW,CAAC;AACzBc,IAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,GAAN,CADiB;AAEzBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAIJ,IAAJ,CAFkB;AAGzBK,IAAAA,KAAK,EAAE;AAHkB,GAAD,CAA1B;AAMA,QAAMC,MAAM,GAAGjB,WAAW,CAAC;AACzBc,IAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,GAAP,CADiB;AAEzBC,IAAAA,KAAK,EAAE,CAACH,IAAD,EAAO,CAAP,CAFkB;AAGzBI,IAAAA,KAAK,EAAE;AAHkB,GAAD,CAA1B;AAMA,sBACE,yCADF;AAgED;;AAED,eAAef,WAAW,CAACE,KAAD,CAA1B","sourcesContent":["  import React from 'react'\n  import { Group } from '@vx/group'\n  import { Circle } from '@vx/shape'\n  import { LinearGradient } from '@vx/gradient'\n  import { scaleLinear } from '@vx/scale'\n  import { withTooltip, Tooltip } from '@vx/tooltip'\n\nfunction Compd() {\n  let tooltipTimeout\n\n  const \n    x = d => d[0],\n    y = d => d[1],\n    z = d => d[2]\n\n  const\n    width = 400,\n    height = 600,\n    xMax = width,\n    yMax = height - 80\n\n  const xScale = scaleLinear({\n    domain: [1.3, 2.2],\n    range: [0, xMax],\n    clamp: true\n  })\n\n  const yScale = scaleLinear({\n    domain: [0.75, 1.6],\n    range: [yMax, 0],\n    clamp: true\n  })\n\n  return (\n    <>\n      {/* <svg width={width} height={height}>\n        <LinearGradient \n            from=\"#b39cea\" \n            to=\"#e99cea\" \n            id=\"gradient\"/>\n        <rect width={width} height={height} fill=\"#fbc2eb\" rx={14} />\n        <Group\n          onTouchStart={event => {\n            if (tooltipTimeout) clearTimeout(tooltipTimeout)\n            props.hideTooltip()\n          }}\n        >\n          {points.map((point, i) => {\n            const cx = xScale(x(point))\n            const cy = yScale(y(point))\n            const r = i % 3 === 0 ? 2 : 2.765\n            return (\n              <Circle\n                key={`point-${point.x}-${i}`}\n                className=\"dot\"\n                cx={cx}\n                cy={cy}\n                r={r}\n                fill=\"#f6c431\"\n                onMouseEnter={event => {\n                  if (tooltipTimeout) clearTimeout(tooltipTimeout)\n                  props.showTooltip({\n                    tooltipLeft: cx,\n                    tooltipTop: cy + 20,\n                    tooltipData: point\n                  })\n                }}\n                onMouseLeave={event => {\n                  tooltipTimeout = setTimeout(() => {\n                    props.hideTooltip()\n                  }, 300)\n                }}\n                onTouchStart={event => {\n                  if (tooltipTimeout) clearTimeout(tooltipTimeout)\n                  props.showTooltip({\n                    tooltipLeft: cx,\n                    tooltipTop: cy - 30,\n                    tooltipData: point\n                  })\n                }}\n              />\n            )\n          })}\n        </Group>\n      </svg>\n      {props.tooltipOpen && (\n        <Tooltip left={props.tooltipLeft} top={props.tooltipTop}>\n          <div>\n            <strong>x:</strong> {x(props.tooltipData)}\n          </div>\n          <div>\n            <strong>y:</strong> {y(props.tooltipData)}\n          </div>\n        </Tooltip>\n      )} */}\n    </>\n  )\n}\n\nexport default withTooltip(Compd)\n"]},"metadata":{},"sourceType":"module"}