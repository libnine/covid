{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Group } from '@vx/group';\nimport { Circle } from '@vx/shape';\nimport { LinearGradient } from '@vx/gradient';\nimport { scaleLinear } from '@vx/scale';\nimport { withTooltip, Tooltip } from '@vx/tooltip';\n\nfunction Compd() {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    (async () => {\n      let a = await axios.get('https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv');\n      let res = await a.data;\n      let dump = [],\n          lines = res.split('\\r'),\n          headers = lines[0].split(',');\n\n      for (let i = 1; i < lines.length; i++) {\n        let obj = {},\n            line = lines[i].replace('\\n', ''),\n            curLine = line.split(',');\n\n        if (parseInt(curLine[0]) > 20000 || !curLine[0]) {\n          continue;\n        }\n\n        console.log(curLine);\n\n        for (let j = 0; j < headers.length; j++) {\n          obj[headers[j].toLowerCase().replace('.', '_')] = curLine[j] || 0;\n        }\n\n        dump.push(obj);\n      }\n\n      setData(dump);\n    })();\n  }, []);\n  let tooltipTimeout; // \n\n  const x = d => d[0],\n        y = d => d[1],\n        z = d => d[2];\n\n  const width = 400,\n        height = 600,\n        xMax = width,\n        yMax = height - 80;\n  const xScale = scaleLinear({\n    domain: [1.3, 2.2],\n    range: [0, xMax],\n    clamp: true\n  });\n  const yScale = scaleLinear({\n    domain: [0.75, 1.6],\n    range: [yMax, 0],\n    clamp: true\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n}\n\nexport default withTooltip(Compd);","map":{"version":3,"sources":["/Users/qorka/Projects/covid/ui/src/components/compd.js"],"names":["React","useState","useEffect","axios","Group","Circle","LinearGradient","scaleLinear","withTooltip","Tooltip","Compd","data","setData","a","get","res","dump","lines","split","headers","i","length","obj","line","replace","curLine","parseInt","console","log","j","toLowerCase","push","tooltipTimeout","x","d","y","z","width","height","xMax","yMax","xScale","domain","range","clamp","yScale"],"mappings":"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","sourcesContent":["  import React, { useState, useEffect } from 'react'\n  import axios from 'axios'\n  import { Group } from '@vx/group'\n  import { Circle } from '@vx/shape'\n  import { LinearGradient } from '@vx/gradient'\n  import { scaleLinear } from '@vx/scale'\n  import { withTooltip, Tooltip } from '@vx/tooltip'\n\nfunction Compd() {\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    (async() => {\n      let a = await axios.get('https://raw.githubusercontent.com/nychealth/coronavirus-data/master/tests-by-zcta.csv')\n      let res = await a.data\n  \n      let \n        dump = [],\n        lines = res.split('\\r'),\n        headers = lines[0].split(',')\n\n      for (let i = 1; i < lines.length; i++) {\n        let\n          obj = {},\n          line = lines[i].replace('\\n', ''),\n          curLine = line.split(',')\n          \n        if (parseInt(curLine[0]) > 20000 || !curLine[0]) { continue }\n        console.log(curLine)\n    \n        for (let j = 0; j < headers.length; j++) {\n          obj[headers[j].toLowerCase().replace('.', '_')] = curLine[j] || 0\n        }\n\n        dump.push(obj)\n      }\n\n      setData(dump)\n    })()\n  }, [])\n\n  let tooltipTimeout\n// \n\n\n  const \n    x = d => d[0],\n    y = d => d[1],\n    z = d => d[2]\n\n  const\n    width = 400,\n    height = 600,\n    xMax = width,\n    yMax = height - 80\n\n  const xScale = scaleLinear({\n    domain: [1.3, 2.2],\n    range: [0, xMax],\n    clamp: true\n  })\n\n  const yScale = scaleLinear({\n    domain: [0.75, 1.6],\n    range: [yMax, 0],\n    clamp: true\n  })\n\n  return (\n    <>\n      {/* <svg width={width} height={height}>\n        <LinearGradient \n            from=\"#b39cea\" \n            to=\"#e99cea\" \n            id=\"gradient\"/>\n        <rect width={width} height={height} fill=\"#fbc2eb\" rx={14} />\n        <Group\n          onTouchStart={event => {\n            if (tooltipTimeout) clearTimeout(tooltipTimeout)\n            props.hideTooltip()\n          }}\n        >\n          {points.map((point, i) => {\n            const cx = xScale(x(point))\n            const cy = yScale(y(point))\n            const r = i % 3 === 0 ? 2 : 2.765\n            return (\n              <Circle\n                key={`point-${point.x}-${i}`}\n                className=\"dot\"\n                cx={cx}\n                cy={cy}\n                r={r}\n                fill=\"#f6c431\"\n                onMouseEnter={event => {\n                  if (tooltipTimeout) clearTimeout(tooltipTimeout)\n                  props.showTooltip({\n                    tooltipLeft: cx,\n                    tooltipTop: cy + 20,\n                    tooltipData: point\n                  })\n                }}\n                onMouseLeave={event => {\n                  tooltipTimeout = setTimeout(() => {\n                    props.hideTooltip()\n                  }, 300)\n                }}\n                onTouchStart={event => {\n                  if (tooltipTimeout) clearTimeout(tooltipTimeout)\n                  props.showTooltip({\n                    tooltipLeft: cx,\n                    tooltipTop: cy - 30,\n                    tooltipData: point\n                  })\n                }}\n              />\n            )\n          })}\n        </Group>\n      </svg>\n      {props.tooltipOpen && (\n        <Tooltip left={props.tooltipLeft} top={props.tooltipTop}>\n          <div>\n            <strong>x:</strong> {x(props.tooltipData)}\n          </div>\n          <div>\n            <strong>y:</strong> {y(props.tooltipData)}\n          </div>\n        </Tooltip>\n      )} */}\n    </>\n  )\n}\n\nexport default withTooltip(Compd)\n"]},"metadata":{},"sourceType":"module"}