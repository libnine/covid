{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Group } from '@vx/group';\nimport { scaleTime, scaleLinear } from '@vx/scale';\nimport { AxisLeft, AxisBottom } from '@vx/axis';\nimport { LinearGradient } from '@vx/gradient';\nimport { extent, max } from 'd3-array';\n\nfunction Compa() {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    (async () => {\n      let a = await axios.get('https://raw.githubusercontent.com/nychealth/coronavirus-data/master/case-hosp-death.csv');\n      let res = await a.data;\n      let dump = [],\n          lines = res.replace('DATE_OF_INTEREST', 'date').split('\\r'),\n          headers = lines[0].split(',');\n\n      for (let i = 1; i < lines.length; i++) {\n        let obj = {},\n            line = lines[i].replace('\\n', ''),\n            curLine = line.split(',');\n\n        for (var j = 0; j < headers.length; j++) {\n          obj[headers[j].toLowerCase()] = curLine[j];\n        }\n\n        dump.push(obj);\n      }\n\n      console.log(dump);\n      setData(dump);\n    })();\n  }, []);\n  const width = window.innerWidth / 2;\n  const height = window.innerHeight / 2;\n\n  const x = d => new Date(d.date);\n\n  const y = d => d.close;\n\n  const margin = {\n    top: 60,\n    bottom: 60,\n    left: 80,\n    right: 80\n  };\n  const xMax = width - margin.left - margin.right;\n  const yMax = height - margin.top - margin.bottom;\n  const xScale = scaleTime({\n    range: [0, xMax],\n    domain: extent(data, x)\n  });\n  const yScale = scaleLinear({\n    range: [yMax, 0],\n    domain: [0, max(data, y)]\n  });\n  return null // <>\n  //   <svg width={width} height={height}>\n  //     <LinearGradient\n  //       from='#fbc2eb'\n  //       to='#a6c1ee'\n  //       id='gradient'\n  //     />\n  //     <Group top={margin.top} left={margin.left}>\n  //       <AreaClosed\n  //         data={data}\n  //         x={d => xScale(x(d))}\n  //         y={d => yScale(y(d))}\n  //         yScale={yScale}\n  //         fill={\"url(#gradient)\"}\n  //         stroke={\"\"}\n  //       />\n  //       <AxisLeft\n  //         scale={yScale}\n  //         top={0}\n  //         left={0}\n  //         label={'Close Price ($)'}\n  //         stroke={'#1b1a1e'}\n  //         tickTextFill={'#1b1a1e'}\n  //       />\n  //       <AxisBottom\n  //         scale={xScale}\n  //         top={yMax}\n  //         label={'Years'}\n  //         stroke={'#1b1a1e'}\n  //         tickTextFill={'#1b1a1e'}\n  //       />\n  //     </Group>\n  //   </svg>\n  // </>\n  ;\n}\n\nexport default Compa;","map":{"version":3,"sources":["/Users/qorka/Projects/covid/ui/src/components/compa.js"],"names":["React","useEffect","useState","axios","Group","scaleTime","scaleLinear","AxisLeft","AxisBottom","LinearGradient","extent","max","Compa","data","setData","a","get","res","dump","lines","replace","split","headers","i","length","obj","line","curLine","j","toLowerCase","push","console","log","width","window","innerWidth","height","innerHeight","x","d","Date","date","y","close","margin","top","bottom","left","right","xMax","yMax","xScale","range","domain","yScale"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { Group } from '@vx/group'\nimport { scaleTime, scaleLinear } from '@vx/scale'\nimport { AxisLeft, AxisBottom } from '@vx/axis'\nimport { LinearGradient } from '@vx/gradient'\nimport { extent, max } from 'd3-array'\n\nfunction Compa() {\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    (async() => {\n      let a = await axios.get('https://raw.githubusercontent.com/nychealth/coronavirus-data/master/case-hosp-death.csv')\n      let res = await a.data\n  \n      let \n        dump = [],\n        lines = res.replace('DATE_OF_INTEREST', 'date').split('\\r'),\n        headers = lines[0].split(',')\n\n      for (let i = 1; i < lines.length; i++) {\n        let\n          obj = {},\n          line = lines[i].replace('\\n', ''),\n          curLine = line.split(',')\n    \n        for (var j = 0; j < headers.length; j++) {\n          obj[headers[j].toLowerCase()] = curLine[j]\n        }\n    \n        dump.push(obj)\n      }\n\n      console.log(dump)\n\n      setData(dump)\n    })()\n  }, [])\n  \n  const width = window.innerWidth / 2\n  const height = window.innerHeight / 2\n\n  const x = d => new Date(d.date)\n  const y = d => d.close\n\n  const margin = {\n    top: 60,\n    bottom: 60,\n    left: 80,\n    right: 80,\n  }\n\n  const xMax = width - margin.left - margin.right\n  const yMax = height - margin.top - margin.bottom\n\n  const xScale = scaleTime({\n    range: [0, xMax],\n    domain: extent(data, x)\n  })\n\n  const yScale = scaleLinear({\n    range: [yMax, 0],\n    domain: [0, max(data, y)],\n  })\n\n  return ( null\n    // <>\n    //   <svg width={width} height={height}>\n    //     <LinearGradient\n    //       from='#fbc2eb'\n    //       to='#a6c1ee'\n    //       id='gradient'\n    //     />\n  \n    //     <Group top={margin.top} left={margin.left}>\n    //       <AreaClosed\n    //         data={data}\n    //         x={d => xScale(x(d))}\n    //         y={d => yScale(y(d))}\n    //         yScale={yScale}\n    //         fill={\"url(#gradient)\"}\n    //         stroke={\"\"}\n    //       />\n  \n    //       <AxisLeft\n    //         scale={yScale}\n    //         top={0}\n    //         left={0}\n    //         label={'Close Price ($)'}\n    //         stroke={'#1b1a1e'}\n    //         tickTextFill={'#1b1a1e'}\n    //       />\n  \n    //       <AxisBottom\n    //         scale={xScale}\n    //         top={yMax}\n    //         label={'Years'}\n    //         stroke={'#1b1a1e'}\n    //         tickTextFill={'#1b1a1e'}\n    //       />\n    //     </Group>\n    //   </svg>\n    // </>\n  )\n}\n\nexport default Compa\n"]},"metadata":{},"sourceType":"module"}