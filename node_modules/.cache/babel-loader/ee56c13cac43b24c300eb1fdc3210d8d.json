{"ast":null,"code":"var _jsxFileName = \"/Users/qorka/Projects/covid/ui/src/components/compb.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Bar } from '@vx/shape';\nimport { Group } from '@vx/group';\nimport { GradientTealBlue } from '@vx/gradient';\nimport { letterFrequency } from '@vx/mock-data';\nimport { scaleBand, scaleLinear } from '@vx/scale';\n\nfunction Compb() {\n  const [data, setData] = useState();\n  useEffect(() => {\n    (async () => {\n      let a = await axios.get('https://raw.githubusercontent.com/nychealth/coronavirus-data/master/boro.csv');\n      let res = await a.data;\n      let dump = [];\n      let lines = res.split('\\r');\n      let headers = lines[0].split(',');\n\n      for (let i = 1; i < lines.length; i++) {\n        let obj = {};\n        let line = lines[i].replace('\\n', '');\n        let curLine = line.split(',');\n\n        for (var j = 0; j < headers.length; j++) {\n          obj[headers[j].toLowerCase()] = curLine[j];\n        }\n\n        dump.push(obj);\n      }\n\n      setData(dump);\n    })();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"svg\", {\n    width: width,\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GradientTealBlue, {\n    id: \"teal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    width: width,\n    height: height,\n    fill: \"url(#teal)\",\n    rx: 14,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Group, {\n    top: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, data.map((d, i) => {\n    const letter = x(d);\n    const barWidth = xScale.bandwidth();\n    const barHeight = yMax - yScale(y(d));\n    const barX = xScale(letter);\n    const barY = yMax - barHeight;\n    return /*#__PURE__*/React.createElement(Bar, {\n      key: `bar-${letter}`,\n      x: barX,\n      y: barY,\n      width: barWidth,\n      height: barHeight,\n      fill: \"rgba(23, 233, 217, .5)\",\n      onClick: event => {\n        alert(`clicked: ${JSON.stringify(Object.values(d))}`);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }\n    });\n  }))));\n}\n\nexport default Compb;","map":{"version":3,"sources":["/Users/qorka/Projects/covid/ui/src/components/compb.js"],"names":["React","useEffect","useState","axios","Bar","Group","GradientTealBlue","letterFrequency","scaleBand","scaleLinear","Compb","data","setData","a","get","res","dump","lines","split","headers","i","length","obj","line","replace","curLine","j","toLowerCase","push","width","height","map","d","letter","x","barWidth","xScale","bandwidth","barHeight","yMax","yScale","y","barX","barY","event","alert","JSON","stringify","Object","values"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { Bar } from '@vx/shape';\nimport { Group } from '@vx/group';\nimport { GradientTealBlue } from '@vx/gradient';\nimport { letterFrequency } from '@vx/mock-data';\nimport { scaleBand, scaleLinear } from '@vx/scale';\n\nfunction Compb() {\n  const [data, setData] = useState()\n\n  useEffect(() => {\n    (async() => {\n      let a = await axios.get('https://raw.githubusercontent.com/nychealth/coronavirus-data/master/boro.csv')\n      let res = await a.data\n\n      let dump = []\n      let lines = res.split('\\r')    \n      let headers = lines[0].split(',')\n    \n      for (let i = 1; i < lines.length; i++) {\n        let obj = {}\n        let line = lines[i].replace('\\n', '')\n        let curLine = line.split(',')\n    \n        for (var j = 0; j < headers.length; j++) {\n          obj[headers[j].toLowerCase()] = curLine[j]\n        }\n    \n        dump.push(obj)\n      }\n\n      setData(dump)\n    })()\n  }, [])\n\n  \n  \n  return (\n    <>\n      <svg width={width} height={height}>\n        <GradientTealBlue id=\"teal\" />\n        <rect width={width} height={height} fill={\"url(#teal)\"} rx={14} />\n        <Group top={40}>\n          {data.map((d, i) => {\n            const letter = x(d);\n            const barWidth = xScale.bandwidth();\n            const barHeight = yMax - yScale(y(d));\n            const barX = xScale(letter);\n            const barY = yMax - barHeight;\n            return (\n              <Bar\n                key={`bar-${letter}`}\n                x={barX}\n                y={barY}\n                width={barWidth}\n                height={barHeight}\n                fill=\"rgba(23, 233, 217, .5)\"\n                onClick={event => {\n                  alert(`clicked: ${JSON.stringify(Object.values(d))}`);\n                }}\n              />\n            );\n          })}\n        </Group>\n      </svg>\n    </>\n  )\n}\n\nexport default Compb\n"]},"metadata":{},"sourceType":"module"}