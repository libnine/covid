import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react'; // @ts-ignore This line could be removed after bounds migration to the TS

import { withBoundingRects } from '@vx/bounds';
import Tooltip from './Tooltip';

function TooltipWithBounds(_ref) {
  var _ref$left = _ref.left,
      initialLeft = _ref$left === void 0 ? 0 : _ref$left,
      _ref$top = _ref.top,
      initialTop = _ref$top === void 0 ? 0 : _ref$top,
      _ref$offsetLeft = _ref.offsetLeft,
      offsetLeft = _ref$offsetLeft === void 0 ? 10 : _ref$offsetLeft,
      _ref$offsetTop = _ref.offsetTop,
      offsetTop = _ref$offsetTop === void 0 ? 10 : _ref$offsetTop,
      rect = _ref.rect,
      parentRect = _ref.parentRect,
      getRects = _ref.getRects,
      children = _ref.children,
      style = _ref.style,
      otherProps = _objectWithoutPropertiesLoose(_ref, ["left", "top", "offsetLeft", "offsetTop", "rect", "parentRect", "getRects", "children", "style"]);

  var left = initialLeft;
  var top = initialTop;

  if (rect && parentRect) {
    left = offsetLeft + rect.right > parentRect.right || offsetLeft + rect.right > window.innerWidth ? left - rect.width - offsetLeft : left + offsetLeft;
    top = offsetTop + rect.bottom > parentRect.bottom || offsetTop + rect.bottom > window.innerHeight ? top - rect.height - offsetTop : top + offsetTop;
  }

  left = Math.round(left);
  top = Math.round(top);
  return React.createElement(Tooltip, _extends({
    style: _extends({
      top: 0,
      transform: "translate(" + left + "px, " + top + "px)"
    }, style)
  }, otherProps), children);
}

TooltipWithBounds.propTypes = {
  offsetLeft: _pt.number,
  offsetTop: _pt.number,
  left: _pt.number,
  top: _pt.number,
  className: _pt.string,
  children: _pt.node,
  getRects: _pt.func,
  rect: _pt.shape({
    top: _pt.number.isRequired,
    right: _pt.number.isRequired,
    bottom: _pt.number.isRequired,
    left: _pt.number.isRequired,
    width: _pt.number.isRequired,
    height: _pt.number.isRequired
  }),
  parentRect: _pt.shape({
    top: _pt.number.isRequired,
    right: _pt.number.isRequired,
    bottom: _pt.number.isRequired,
    left: _pt.number.isRequired,
    width: _pt.number.isRequired,
    height: _pt.number.isRequired
  })
};
export default withBoundingRects(TooltipWithBounds);